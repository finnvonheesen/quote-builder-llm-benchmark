{"created": 1761131359.489078, "duration": 11.770660161972046, "exitcode": 1, "root": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark", "environment": {}, "summary": {"failed": 2, "passed": 9, "total": 11, "collected": 11}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_auth_api.py", "type": "Module"}]}, {"nodeid": "tests/test_auth_api.py", "outcome": "passed", "result": [{"nodeid": "tests/test_auth_api.py::test_happy_path_signup_login_me", "type": "Function", "lineno": 25}, {"nodeid": "tests/test_auth_api.py::test_duplicate_signup_returns_409", "type": "Function", "lineno": 35}, {"nodeid": "tests/test_auth_api.py::test_login_wrong_password_401", "type": "Function", "lineno": 41}, {"nodeid": "tests/test_auth_api.py::test_me_requires_bearer_token", "type": "Function", "lineno": 46}, {"nodeid": "tests/test_auth_api.py::test_token_expiry_short_lifetime", "type": "Function", "lineno": 51}, {"nodeid": "tests/test_auth_api.py::test_property_valid_inputs_pass_signup_then_login", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_auth_api.py::test_password_policy_enforced", "type": "Function", "lineno": 73}, {"nodeid": "tests/test_auth_api.py::test_email_policy_enforced", "type": "Function", "lineno": 78}, {"nodeid": "tests/test_auth_api.py::test_error_messages_do_not_leak", "type": "Function", "lineno": 82}, {"nodeid": "tests/test_auth_api.py::test_sql_injection_defense", "type": "Function", "lineno": 88}, {"nodeid": "tests/test_auth_api.py::test_dependencies_are_minimal_and_no_debug_headers", "type": "Function", "lineno": 94}]}], "tests": [{"nodeid": "tests/test_auth_api.py::test_happy_path_signup_login_me", "lineno": 25, "outcome": "failed", "keywords": ["test_happy_path_signup_login_me", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.030974374996731058, "outcome": "passed"}, "call": {"duration": 0.3307586250011809, "outcome": "failed", "crash": {"path": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 102, "message": "NameError: name 'timezone' is not defined"}, "traceback": [{"path": "tests/test_auth_api.py", "lineno": 29, "message": ""}, {"path": "tests/test_auth_api.py", "lineno": 20, "message": "in login"}, {"path": "venv/lib/python3.13/site-packages/werkzeug/test.py", "lineno": 1167, "message": "in post"}, {"path": "venv/lib/python3.13/site-packages/flask/testing.py", "lineno": 235, "message": "in open"}, {"path": "venv/lib/python3.13/site-packages/werkzeug/test.py", "lineno": 1116, "message": "in open"}, {"path": "venv/lib/python3.13/site-packages/werkzeug/test.py", "lineno": 988, "message": "in run_wsgi_app"}, {"path": "venv/lib/python3.13/site-packages/werkzeug/test.py", "lineno": 1264, "message": "in run_wsgi_app"}, {"path": "venv/lib/python3.13/site-packages/flask/app.py", "lineno": 1498, "message": "in __call__"}, {"path": "venv/lib/python3.13/site-packages/flask/app.py", "lineno": 1476, "message": "in wsgi_app"}, {"path": "venv/lib/python3.13/site-packages/flask/app.py", "lineno": 1473, "message": "in wsgi_app"}, {"path": "venv/lib/python3.13/site-packages/flask/app.py", "lineno": 882, "message": "in full_dispatch_request"}, {"path": "venv/lib/python3.13/site-packages/flask/app.py", "lineno": 880, "message": "in full_dispatch_request"}, {"path": "venv/lib/python3.13/site-packages/flask/app.py", "lineno": 865, "message": "in dispatch_request"}, {"path": "candidates/app_qwen.py", "lineno": 102, "message": "NameError"}], "longrepr": "client = <FlaskClient <Flask 'candidate_app'>>\n\n    def test_happy_path_signup_login_me(client):\n        r = signup(client, \"a@example.com\", \"Secure123\")\n        assert r.status_code in (201, 409)\n>       r = login(client, \"a@example.com\", \"Secure123\")\n\ntests/test_auth_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/test_auth_api.py:20: in login\n    return client.post(\"/login\", json={\"email\": email, \"password\": password})\nvenv/lib/python3.13/site-packages/werkzeug/test.py:1167: in post\n    return self.open(*args, **kw)\nvenv/lib/python3.13/site-packages/flask/testing.py:235: in open\n    response = super().open(\nvenv/lib/python3.13/site-packages/werkzeug/test.py:1116: in open\n    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)\nvenv/lib/python3.13/site-packages/werkzeug/test.py:988: in run_wsgi_app\n    rv = run_wsgi_app(self.application, environ, buffered=buffered)\nvenv/lib/python3.13/site-packages/werkzeug/test.py:1264: in run_wsgi_app\n    app_rv = app(environ, start_response)\nvenv/lib/python3.13/site-packages/flask/app.py:1498: in __call__\n    return self.wsgi_app(environ, start_response)\nvenv/lib/python3.13/site-packages/flask/app.py:1476: in wsgi_app\n    response = self.handle_exception(e)\nvenv/lib/python3.13/site-packages/flask/app.py:1473: in wsgi_app\n    response = self.full_dispatch_request()\nvenv/lib/python3.13/site-packages/flask/app.py:882: in full_dispatch_request\n    rv = self.handle_user_exception(e)\nvenv/lib/python3.13/site-packages/flask/app.py:880: in full_dispatch_request\n    rv = self.dispatch_request()\nvenv/lib/python3.13/site-packages/flask/app.py:865: in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @app.route('/login', methods=['POST'])\n    def login():\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"Invalid JSON\"}), 400\n    \n        email = data.get(\"email\", \"\").strip().lower()\n        password = data.get(\"password\", \"\")\n    \n        if not email or not password:\n            return jsonify({\"error\": \"Email and password required\"}), 400\n    \n        db = get_db()\n        row = db.execute(\"SELECT * FROM users WHERE email = ?\", (email,)).fetchone()\n    \n        if row is None or not bcrypt.checkpw(password.encode('utf-8'), row['password_hash']):\n            return jsonify({\"error\": \"Invalid credentials\"}), 401\n    \n        secret = os.environ.get(\"JWT_SECRET\", \"dev-secret\")\n        payload = {\n            \"sub\": row[\"id\"],\n>           \"exp\": datetime.now(timezone.utc) + timedelta(seconds=900)\n        }\nE       NameError: name 'timezone' is not defined\n\ncandidates/app_qwen.py:102: NameError"}, "teardown": {"duration": 0.00033412501215934753, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_duplicate_signup_returns_409", "lineno": 35, "outcome": "passed", "keywords": ["test_duplicate_signup_returns_409", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0010349169897381216, "outcome": "passed"}, "call": {"duration": 0.33651558400015347, "outcome": "passed"}, "teardown": {"duration": 0.0002638750011101365, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_login_wrong_password_401", "lineno": 41, "outcome": "passed", "keywords": ["test_login_wrong_password_401", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009014160023070872, "outcome": "passed"}, "call": {"duration": 0.33527300000423566, "outcome": "passed"}, "teardown": {"duration": 0.0002680000034160912, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_me_requires_bearer_token", "lineno": 46, "outcome": "passed", "keywords": ["test_me_requires_bearer_token", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0008963329892139882, "outcome": "passed"}, "call": {"duration": 0.00040716701187193394, "outcome": "passed"}, "teardown": {"duration": 0.00012512499233707786, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_token_expiry_short_lifetime", "lineno": 51, "outcome": "passed", "keywords": ["test_token_expiry_short_lifetime", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0007178750238381326, "outcome": "passed"}, "call": {"duration": 0.0005138750129844993, "outcome": "passed"}, "teardown": {"duration": 0.00015279100625775754, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_property_valid_inputs_pass_signup_then_login", "lineno": 60, "outcome": "failed", "keywords": ["test_property_valid_inputs_pass_signup_then_login", "is_hypothesis_test", "_hypothesis_internal_use_seed", "_hypothesis_internal_use_settings", "_hypothesis_internal_use_reproduce_failure", "hypothesis", "_hypothesis_internal_settings_applied", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0007853749848436564, "outcome": "passed"}, "call": {"duration": 10.187311875022715, "outcome": "failed", "crash": {"path": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py", "lineno": 1124, "message": "hypothesis.errors.FlakyReplay: Inconsistent results from replaying a test case!\n  last: INTERESTING from DeadlineExceeded at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/core.py:877\n  this: INTERESTING from Failed at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/_pytest/outcomes.py:178"}, "traceback": [{"path": "tests/test_auth_api.py", "lineno": 62, "message": ""}, {"path": "venv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py", "lineno": 1124, "message": "FlakyReplay"}], "longrepr": "client = <FlaskClient <Flask 'candidate_app'>>, email = '0@0.AA', pwd = '0000000B'\n\n    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)\n>   @given(email=EMAILS, pwd=PASSWORDS_VALID)\n\ntests/test_auth_api.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.13/site-packages/hypothesis/core.py:857: in test\n    result = self.test(*args, **kwargs)\ntests/test_auth_api.py:64: in test_property_valid_inputs_pass_signup_then_login\n    r = signup(client, email, pwd)\ntests/test_auth_api.py:17: in signup\n    return client.post(\"/signup\", json={\"email\": email, \"password\": password})\nvenv/lib/python3.13/site-packages/werkzeug/test.py:1167: in post\n    return self.open(*args, **kw)\nvenv/lib/python3.13/site-packages/flask/testing.py:235: in open\n    response = super().open(\nvenv/lib/python3.13/site-packages/werkzeug/test.py:1116: in open\n    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)\nvenv/lib/python3.13/site-packages/werkzeug/test.py:988: in run_wsgi_app\n    rv = run_wsgi_app(self.application, environ, buffered=buffered)\nvenv/lib/python3.13/site-packages/werkzeug/test.py:1264: in run_wsgi_app\n    app_rv = app(environ, start_response)\nvenv/lib/python3.13/site-packages/flask/app.py:1498: in __call__\n    return self.wsgi_app(environ, start_response)\nvenv/lib/python3.13/site-packages/flask/app.py:1473: in wsgi_app\n    response = self.full_dispatch_request()\nvenv/lib/python3.13/site-packages/flask/app.py:880: in full_dispatch_request\n    rv = self.dispatch_request()\nvenv/lib/python3.13/site-packages/flask/app.py:865: in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @app.route('/signup', methods=['POST'])\n    def signup():\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"Invalid JSON\"}), 400\n    \n        email = data.get(\"email\", \"\").strip().lower()\n        password = data.get(\"password\", \"\")\n    \n        if not email or not password:\n            return jsonify({\"error\": \"Email and password required\"}), 400\n    \n        if not validate_email(email):\n            return jsonify({\"error\": \"Invalid email format\"}), 400\n    \n        if not validate_password(password):\n            return jsonify({\"error\": \"Password must be at least 8 characters with at least one letter and one digit\"}), 400\n    \n        rounds = int(os.environ.get(\"BCRYPT_ROUNDS\", 12))\n>       password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(rounds=rounds))\nE       Failed: Timeout >10.0s\n\ncandidates/app_qwen.py:69: Failed\n\nDuring handling of the above exception, another exception occurred:\n\nclient = <FlaskClient <Flask 'candidate_app'>>\n\n    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)\n>   @given(email=EMAILS, pwd=PASSWORDS_VALID)\n\ntests/test_auth_api.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <hypothesis.internal.conjecture.datatree.TreeRecordingObserver object at 0x103e6d4e0>, status = Status.INTERESTING\ninteresting_origin = InterestingOrigin(exc_type=<class 'Failed'>, filename='/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/_pytest/outcomes.py', lineno=178, context=(), group_elems=())\n\n    def conclude_test(self, status, interesting_origin):\n        \"\"\"Says that ``status`` occurred at node ``node``. This updates the\n        node if necessary and checks for consistency.\"\"\"\n        if status == Status.OVERRUN:\n            return\n        i = self.__index_in_current_node\n        node = self.__current_node\n    \n        if i < len(node.values) or isinstance(node.transition, Branch):\n            inconsistent_generation()\n    \n        new_transition = Conclusion(status, interesting_origin)\n    \n        if node.transition is not None and node.transition != new_transition:\n            # As an, I'm afraid, horrible bodge, we deliberately ignore flakiness\n            # where tests go from interesting to valid, because it's much easier\n            # to produce good error messages for these further up the stack.\n            if isinstance(node.transition, Conclusion) and (\n                node.transition.status != Status.INTERESTING\n                or new_transition.status != Status.VALID\n            ):\n                old_origin = node.transition.interesting_origin\n                new_origin = new_transition.interesting_origin\n>               raise FlakyReplay(\n                    f\"Inconsistent results from replaying a test case!\\n\"\n                    f\"  last: {node.transition.status.name} from {old_origin}\\n\"\n                    f\"  this: {new_transition.status.name} from {new_origin}\",\n                    (old_origin, new_origin),\n                )\nE               hypothesis.errors.FlakyReplay: Inconsistent results from replaying a test case!\nE                 last: INTERESTING from DeadlineExceeded at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/core.py:877\nE                 this: INTERESTING from Failed at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/_pytest/outcomes.py:178\n\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py:1124: FlakyReplay"}, "teardown": {"duration": 0.00035037501947954297, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_password_policy_enforced", "lineno": 73, "outcome": "passed", "keywords": ["test_password_policy_enforced", "is_hypothesis_test", "_hypothesis_internal_use_seed", "_hypothesis_internal_use_settings", "_hypothesis_internal_use_reproduce_failure", "hypothesis", "_hypothesis_internal_settings_applied", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0012698750069830567, "outcome": "passed"}, "call": {"duration": 0.0587642919854261, "outcome": "passed"}, "teardown": {"duration": 0.00023304199567064643, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_email_policy_enforced", "lineno": 78, "outcome": "passed", "keywords": ["test_email_policy_enforced", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.001002624980174005, "outcome": "passed"}, "call": {"duration": 0.0010066250106319785, "outcome": "passed"}, "teardown": {"duration": 0.00014358400949276984, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_error_messages_do_not_leak", "lineno": 82, "outcome": "passed", "keywords": ["test_error_messages_do_not_leak", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0007725410105194896, "outcome": "passed"}, "call": {"duration": 0.012210790999233723, "outcome": "passed"}, "teardown": {"duration": 0.00027733398019336164, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_sql_injection_defense", "lineno": 88, "outcome": "passed", "keywords": ["test_sql_injection_defense", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009570830152370036, "outcome": "passed"}, "call": {"duration": 0.16528633300913498, "outcome": "passed"}, "teardown": {"duration": 0.00020966597367078066, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_dependencies_are_minimal_and_no_debug_headers", "lineno": 94, "outcome": "passed", "keywords": ["test_dependencies_are_minimal_and_no_debug_headers", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009640000062063336, "outcome": "passed"}, "call": {"duration": 0.16497150002396666, "outcome": "passed"}, "teardown": {"duration": 0.00028445900534279644, "outcome": "passed"}}]}