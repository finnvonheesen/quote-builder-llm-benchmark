{"created": 1761128607.2561548, "duration": 11.81031608581543, "exitcode": 1, "root": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark", "environment": {}, "summary": {"passed": 9, "failed": 2, "total": 11, "collected": 11}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_auth_api.py", "type": "Module"}]}, {"nodeid": "tests/test_auth_api.py", "outcome": "passed", "result": [{"nodeid": "tests/test_auth_api.py::test_happy_path_signup_login_me", "type": "Function", "lineno": 25}, {"nodeid": "tests/test_auth_api.py::test_duplicate_signup_returns_409", "type": "Function", "lineno": 35}, {"nodeid": "tests/test_auth_api.py::test_login_wrong_password_401", "type": "Function", "lineno": 41}, {"nodeid": "tests/test_auth_api.py::test_me_requires_bearer_token", "type": "Function", "lineno": 46}, {"nodeid": "tests/test_auth_api.py::test_token_expiry_short_lifetime", "type": "Function", "lineno": 51}, {"nodeid": "tests/test_auth_api.py::test_property_valid_inputs_pass_signup_then_login", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_auth_api.py::test_password_policy_enforced", "type": "Function", "lineno": 73}, {"nodeid": "tests/test_auth_api.py::test_email_policy_enforced", "type": "Function", "lineno": 78}, {"nodeid": "tests/test_auth_api.py::test_error_messages_do_not_leak", "type": "Function", "lineno": 82}, {"nodeid": "tests/test_auth_api.py::test_sql_injection_defense", "type": "Function", "lineno": 88}, {"nodeid": "tests/test_auth_api.py::test_dependencies_are_minimal_and_no_debug_headers", "type": "Function", "lineno": 94}]}], "tests": [{"nodeid": "tests/test_auth_api.py::test_happy_path_signup_login_me", "lineno": 25, "outcome": "passed", "keywords": ["test_happy_path_signup_login_me", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.030850667011691257, "outcome": "passed"}, "call": {"duration": 0.32895087500219233, "outcome": "passed"}, "teardown": {"duration": 0.0002688329841475934, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_duplicate_signup_returns_409", "lineno": 35, "outcome": "passed", "keywords": ["test_duplicate_signup_returns_409", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009019160061143339, "outcome": "passed"}, "call": {"duration": 0.3285306670004502, "outcome": "passed"}, "teardown": {"duration": 0.0002846670104190707, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_login_wrong_password_401", "lineno": 41, "outcome": "passed", "keywords": ["test_login_wrong_password_401", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009764999849721789, "outcome": "passed"}, "call": {"duration": 0.3279769170039799, "outcome": "passed"}, "teardown": {"duration": 0.0002700829936657101, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_me_requires_bearer_token", "lineno": 46, "outcome": "passed", "keywords": ["test_me_requires_bearer_token", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.000960292003583163, "outcome": "passed"}, "call": {"duration": 0.0004002919886261225, "outcome": "passed"}, "teardown": {"duration": 0.00012549999519251287, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_token_expiry_short_lifetime", "lineno": 51, "outcome": "passed", "keywords": ["test_token_expiry_short_lifetime", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0007402909977827221, "outcome": "passed"}, "call": {"duration": 0.0002599589934106916, "outcome": "passed"}, "teardown": {"duration": 0.0001379589957650751, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_property_valid_inputs_pass_signup_then_login", "lineno": 60, "outcome": "failed", "keywords": ["test_property_valid_inputs_pass_signup_then_login", "is_hypothesis_test", "_hypothesis_internal_use_seed", "_hypothesis_internal_use_settings", "_hypothesis_internal_use_reproduce_failure", "hypothesis", "_hypothesis_internal_settings_applied", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0006285000126808882, "outcome": "passed"}, "call": {"duration": 10.016076665982837, "outcome": "failed", "crash": {"path": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py", "lineno": 52, "message": "hypothesis.errors.FlakyStrategyDefinition: Inconsistent data generation! Data generation behaved differently between different runs. Is your data generation depending on external state?"}, "traceback": [{"path": "tests/test_auth_api.py", "lineno": 62, "message": ""}, {"path": "venv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py", "lineno": 52, "message": "FlakyStrategyDefinition"}], "longrepr": "self = <hypothesis.core.StateForActualGivenExecution object at 0x103665e80>, data = ConjectureData(INTERESTING, 0 bytes, frozen)\n\n    def _execute_once_for_engine(self, data: ConjectureData) -> None:\n        \"\"\"Wrapper around ``execute_once`` that intercepts test failure\n        exceptions and single-test control exceptions, and turns them into\n        appropriate method calls to `data` instead.\n    \n        This allows the engine to assume that any exception other than\n        ``StopTest`` must be a fatal error, and should stop the entire engine.\n        \"\"\"\n        trace: Trace = set()\n        try:\n            if self._should_trace() and Tracer.can_trace():  # pragma: no cover\n                # This is in fact covered by our *non-coverage* tests, but due to the\n                # settrace() contention *not* by our coverage tests.  Ah well.\n                with Tracer() as tracer:\n                    try:\n                        result = self.execute_once(data)\n                        if data.status == Status.VALID:\n                            self.explain_traces[None].add(frozenset(tracer.branches))\n                    finally:\n                        trace = tracer.branches\n            else:\n>               result = self.execute_once(data)\n\nvenv/lib/python3.13/site-packages/hypothesis/core.py:1049: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.13/site-packages/hypothesis/core.py:979: in execute_once\n    result = self.test_runner(data, run)\nvenv/lib/python3.13/site-packages/hypothesis/core.py:743: in default_executor\n    return function(data)\nvenv/lib/python3.13/site-packages/hypothesis/core.py:890: in run\n    kw, argslices = context.prep_args_kwargs_from_strategies(\nvenv/lib/python3.13/site-packages/hypothesis/control.py:154: in prep_args_kwargs_from_strategies\n    obj = check(self.data.draw(s, observe_as=f\"generate:{k}\"))\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/data.py:2525: in draw\n    return strategy.do_draw(self)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/lazy.py:167: in do_draw\n    return data.draw(self.wrapped_strategy)\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/data.py:2519: in draw\n    return strategy.do_draw(self)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/lazy.py:167: in do_draw\n    return data.draw(self.wrapped_strategy)\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/data.py:2519: in draw\n    return strategy.do_draw(self)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/strategies.py:1006: in do_draw\n    result = self.do_filtered_draw(data)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/strategies.py:1016: in do_filtered_draw\n    value = data.draw(self.filtered_strategy)\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/data.py:2519: in draw\n    return strategy.do_draw(self)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/core.py:1785: in do_draw\n    return self.definition(data.draw, *self.args, **self.kwargs)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/regex.py:98: in clear_cache_after_draw\n    cache = draw(GROUP_CACHE_STRATEGY)\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/data.py:2519: in draw\n    return strategy.do_draw(self)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/shared.py:37: in do_draw\n    sharing[key] = data.draw(self.base)\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/data.py:2519: in draw\n    return strategy.do_draw(self)\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/lazy.py:167: in do_draw\n    return data.draw(self.wrapped_strategy)\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/data.py:2505: in draw\n    strategy.validate()\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/core.py:1057: in validate\n    fixed_dictionaries(self.kwargs).validate()\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/strategies.py:429: in validate\n    self.is_empty\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/strategies.py:147: in accept\n    recur(self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstrat = fixed_dictionaries({})\n\n    def recur(strat):\n        try:\n            return forced_value(strat)\n        except AttributeError:\n            pass\n>       result = mapping.get(strat, sentinel)\nE       Failed: Timeout >10.0s\n\nvenv/lib/python3.13/site-packages/hypothesis/strategies/_internal/strategies.py:137: Failed\n\nDuring handling of the above exception, another exception occurred:\n\nclient = <FlaskClient <Flask 'candidate_app'>>\n\n    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)\n>   @given(email=EMAILS, pwd=PASSWORDS_VALID)\n\ntests/test_auth_api.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def inconsistent_generation():\n>       raise FlakyStrategyDefinition(\n            \"Inconsistent data generation! Data generation behaved differently \"\n            \"between different runs. Is your data generation depending on external \"\n            \"state?\"\n        )\nE       hypothesis.errors.FlakyStrategyDefinition: Inconsistent data generation! Data generation behaved differently between different runs. Is your data generation depending on external state?\n\nvenv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py:52: FlakyStrategyDefinition"}, "teardown": {"duration": 0.0004549169971141964, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_password_policy_enforced", "lineno": 73, "outcome": "passed", "keywords": ["test_password_policy_enforced", "is_hypothesis_test", "_hypothesis_internal_use_seed", "_hypothesis_internal_use_settings", "_hypothesis_internal_use_reproduce_failure", "hypothesis", "_hypothesis_internal_settings_applied", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0012991669937036932, "outcome": "passed"}, "call": {"duration": 0.08517350000329316, "outcome": "passed"}, "teardown": {"duration": 0.00022700001136399806, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_email_policy_enforced", "lineno": 78, "outcome": "failed", "keywords": ["test_email_policy_enforced", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0011791250144597143, "outcome": "passed"}, "call": {"duration": 0.16641625002375804, "outcome": "failed", "crash": {"path": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/tests/test_auth_api.py", "lineno": 81, "message": "AssertionError: assert 201 == 400\n +  where 201 = <WrapperTestResponse streamed [201 CREATED]>.status_code\n +    where <WrapperTestResponse streamed [201 CREATED]> = signup(<FlaskClient <Flask 'candidate_app'>>, 'a@b..com', 'Strong123')"}, "traceback": [{"path": "tests/test_auth_api.py", "lineno": 81, "message": "AssertionError"}], "longrepr": "client = <FlaskClient <Flask 'candidate_app'>>\n\n    def test_email_policy_enforced(client):\n        for bad in [\"x\", \"user@\", \"@domain.com\", \"a@b\", \"a@b.\", \"a@b.c\", \"a@b..com\", \"a b@c.com\"]:\n>           assert signup(client, bad, \"Strong123\").status_code == 400\nE           AssertionError: assert 201 == 400\nE            +  where 201 = <WrapperTestResponse streamed [201 CREATED]>.status_code\nE            +    where <WrapperTestResponse streamed [201 CREATED]> = signup(<FlaskClient <Flask 'candidate_app'>>, 'a@b..com', 'Strong123')\n\ntests/test_auth_api.py:81: AssertionError"}, "teardown": {"duration": 0.00022008302039466798, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_error_messages_do_not_leak", "lineno": 82, "outcome": "passed", "keywords": ["test_error_messages_do_not_leak", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009209169948007911, "outcome": "passed"}, "call": {"duration": 0.0008853749895934016, "outcome": "passed"}, "teardown": {"duration": 0.00020004200632683933, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_sql_injection_defense", "lineno": 88, "outcome": "passed", "keywords": ["test_sql_injection_defense", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009196669852826744, "outcome": "passed"}, "call": {"duration": 0.1652006660006009, "outcome": "passed"}, "teardown": {"duration": 0.0002097500255331397, "outcome": "passed"}}, {"nodeid": "tests/test_auth_api.py::test_dependencies_are_minimal_and_no_debug_headers", "lineno": 94, "outcome": "passed", "keywords": ["test_dependencies_are_minimal_and_no_debug_headers", "test_auth_api.py", "tests", "quote-builder-llm-benchmark", ""], "setup": {"duration": 0.0009107909863814712, "outcome": "passed"}, "call": {"duration": 0.16498395800590515, "outcome": "passed"}, "teardown": {"duration": 0.0002820839872583747, "outcome": "passed"}}], "warnings": [{"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}, {"message": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_qwen.py", "lineno": 99}]}