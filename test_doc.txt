=== Running tests for app_claude.py ===
Working dir: /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark
Command    : pytest "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/tests/test_auth_api.py" --json-report --json-report-file="/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/report.json" -q --timeout=10
ENV        : CANDIDATE_APP=/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_claude.py  JWT_SECRET=test-secret
.....F.F...                                                                                                                                                       [100%]
=============================================================================== FAILURES ================================================================================
___________________________________________________________ test_property_valid_inputs_pass_signup_then_login ___________________________________________________________

client = <FlaskClient <Flask 'candidate_app'>>

    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)
>   @given(email=EMAILS, pwd=PASSWORDS_VALID)

tests/test_auth_api.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <FlaskClient <Flask 'candidate_app'>>, email = '0@0.AA', pwd = '0000000A'

    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)
    @given(email=EMAILS, pwd=PASSWORDS_VALID)
    def test_property_valid_inputs_pass_signup_then_login(client, email, pwd):
        r = signup(client, email, pwd)
        assert r.status_code in (201, 409)
        r = login(client, email, pwd)
        assert r.status_code in (200, 401)
        if r.status_code == 200:
            token = r.get_json()["access_token"]
            r2 = me(client, token)
            assert r2.status_code == 200
>           assert r2.get_json()["email"] == email
E           AssertionError: assert '0@0.aa' == '0@0.AA'
E             
E             - 0@0.AA
E             + 0@0.aa
E           Falsifying example: test_property_valid_inputs_pass_signup_then_login(
E               client=<FlaskClient <Flask 'candidate_app'>>,
E               email='0@0.AA',
E               pwd='0000000A',
E           )
E           Explanation:
E               These lines were always and only run by failing examples:
E                   /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_claude.py:143
E                   /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_claude.py:152
E                   /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_claude.py:75
E                   /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/tests/test_auth_api.py:69
E                   /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/tests/test_auth_api.py:70
E                   (and 20 more with settings.verbosity >= verbose)

tests/test_auth_api.py:72: AssertionError
______________________________________________________________________ test_email_policy_enforced _______________________________________________________________________

client = <FlaskClient <Flask 'candidate_app'>>

    def test_email_policy_enforced(client):
        for bad in ["x", "user@", "@domain.com", "a@b", "a@b.", "a@b.c", "a@b..com", "a b@c.com"]:
>           assert signup(client, bad, "Strong123").status_code == 400
E           AssertionError: assert 201 == 400
E            +  where 201 = <WrapperTestResponse streamed [201 CREATED]>.status_code
E            +    where <WrapperTestResponse streamed [201 CREATED]> = signup(<FlaskClient <Flask 'candidate_app'>>, 'a@b..com', 'Strong123')

tests/test_auth_api.py:81: AssertionError
=========================================================================== warnings summary ============================================================================
tests/test_auth_api.py: 15 warnings
  /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_claude.py:62: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    "exp": datetime.utcnow() + timedelta(seconds=900)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================================================================== short test summary info ========================================================================
FAILED tests/test_auth_api.py::test_property_valid_inputs_pass_signup_then_login - AssertionError: assert '0@0.aa' == '0@0.AA'
FAILED tests/test_auth_api.py::test_email_policy_enforced - AssertionError: assert 201 == 400
2 failed, 9 passed, 15 warnings in 5.67s
pytest return code: 1
/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/run_benchmark.py:43: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  datetime.utcnow().isoformat(timespec='seconds') + 'Z',
Saved result for app_claude: rc=1, passed=9, failed=2, total=11

=== Running tests for app_gemini.py ===
Working dir: /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark
Command    : pytest "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/tests/test_auth_api.py" --json-report --json-report-file="/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/report.json" -q --timeout=10
ENV        : CANDIDATE_APP=/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_gemini.py  JWT_SECRET=test-secret
.....F.F...                                                                                                                                                       [100%]
=============================================================================== FAILURES ================================================================================
___________________________________________________________ test_property_valid_inputs_pass_signup_then_login ___________________________________________________________

client = <FlaskClient <Flask 'candidate_app'>>, email = '6jic01@1.BR', pwd = '2m=,Py6]9K2`@Jle=(p|'

    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)
>   @given(email=EMAILS, pwd=PASSWORDS_VALID)

tests/test_auth_api.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<FlaskClient <Flask 'candidate_app'>>, '6jic01@1.BR', '2m=,Py6]9K2`@Jle=(p|'), kwargs = {}, arg_drawtime = 0.0007707919867243618, arg_stateful = 0.0
arg_gctime = 0.25456703433883376, start = 170002.831225541, result = None, finish = 170003.153329708, in_drawtime = 0.0, in_stateful = 0.0, in_gctime = 0.0
runtime = 0.32210416698944755

    @proxies(self.test)
    def test(*args, **kwargs):
        arg_drawtime = math.fsum(data.draw_times.values())
        arg_stateful = math.fsum(data._stateful_run_times.values())
        arg_gctime = gc_cumulative_time()
        start = time.perf_counter()
        try:
            with ensure_free_stackframes():
                result = self.test(*args, **kwargs)
        finally:
            finish = time.perf_counter()
            in_drawtime = math.fsum(data.draw_times.values()) - arg_drawtime
            in_stateful = (
                math.fsum(data._stateful_run_times.values()) - arg_stateful
            )
            in_gctime = gc_cumulative_time() - arg_gctime
            runtime = finish - start - in_drawtime - in_stateful - in_gctime
            self._timing_features = {
                "execute:test": runtime,
                "overall:gc": in_gctime,
                **data.draw_times,
                **data._stateful_run_times,
            }
    
        if (current_deadline := self.settings.deadline) is not None:
            if not is_final:
                current_deadline = (current_deadline // 4) * 5
            if runtime >= current_deadline.total_seconds():
>               raise DeadlineExceeded(
                    datetime.timedelta(seconds=runtime), self.settings.deadline
                )
E               hypothesis.errors.DeadlineExceeded: Test took 322.10ms, which exceeds the deadline of 200.00ms

venv/lib/python3.13/site-packages/hypothesis/core.py:877: DeadlineExceeded

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'candidate_app'>>

    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)
>   @given(email=EMAILS, pwd=PASSWORDS_VALID)

tests/test_auth_api.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <hypothesis.internal.conjecture.datatree.TreeRecordingObserver object at 0x1068f9860>, status = Status.INTERESTING
interesting_origin = InterestingOrigin(exc_type=<class 'hypothesis.errors.DeadlineExceeded'>, filename='/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/core.py', lineno=877, context=(), group_elems=())

    def conclude_test(self, status, interesting_origin):
        """Says that ``status`` occurred at node ``node``. This updates the
        node if necessary and checks for consistency."""
        if status == Status.OVERRUN:
            return
        i = self.__index_in_current_node
        node = self.__current_node
    
        if i < len(node.values) or isinstance(node.transition, Branch):
            inconsistent_generation()
    
        new_transition = Conclusion(status, interesting_origin)
    
        if node.transition is not None and node.transition != new_transition:
            # As an, I'm afraid, horrible bodge, we deliberately ignore flakiness
            # where tests go from interesting to valid, because it's much easier
            # to produce good error messages for these further up the stack.
            if isinstance(node.transition, Conclusion) and (
                node.transition.status != Status.INTERESTING
                or new_transition.status != Status.VALID
            ):
                old_origin = node.transition.interesting_origin
                new_origin = new_transition.interesting_origin
>               raise FlakyReplay(
                    f"Inconsistent results from replaying a test case!\n"
                    f"  last: {node.transition.status.name} from {old_origin}\n"
                    f"  this: {new_transition.status.name} from {new_origin}",
                    (old_origin, new_origin),
                )
E               hypothesis.errors.FlakyReplay: Inconsistent results from replaying a test case!
E                 last: INTERESTING from Failed at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/_pytest/outcomes.py:178
E                 this: INTERESTING from DeadlineExceeded at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/core.py:877

venv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py:1124: FlakyReplay
______________________________________________________________________ test_email_policy_enforced _______________________________________________________________________

client = <FlaskClient <Flask 'candidate_app'>>

    def test_email_policy_enforced(client):
        for bad in ["x", "user@", "@domain.com", "a@b", "a@b.", "a@b.c", "a@b..com", "a b@c.com"]:
>           assert signup(client, bad, "Strong123").status_code == 400
E           AssertionError: assert 201 == 400
E            +  where 201 = <WrapperTestResponse streamed [201 CREATED]>.status_code
E            +    where <WrapperTestResponse streamed [201 CREATED]> = signup(<FlaskClient <Flask 'candidate_app'>>, 'a@b..com', 'Strong123')

tests/test_auth_api.py:81: AssertionError
======================================================================== short test summary info ========================================================================
FAILED tests/test_auth_api.py::test_property_valid_inputs_pass_signup_then_login - hypothesis.errors.FlakyReplay: Inconsistent results from replaying a test case!
FAILED tests/test_auth_api.py::test_email_policy_enforced - AssertionError: assert 201 == 400
2 failed, 9 passed in 157.38s (0:02:37)
pytest return code: 1
/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/run_benchmark.py:43: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  datetime.utcnow().isoformat(timespec='seconds') + 'Z',
Saved result for app_gemini: rc=1, passed=9, failed=2, total=11

=== Running tests for app_gpt5.py ===
Working dir: /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark
Command    : pytest "/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/tests/test_auth_api.py" --json-report --json-report-file="/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/report.json" -q --timeout=10
ENV        : CANDIDATE_APP=/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/candidates/app_gpt5.py  JWT_SECRET=test-secret
.....F.F...                                                                                                                                                       [100%]
=============================================================================== FAILURES ================================================================================
___________________________________________________________ test_property_valid_inputs_pass_signup_then_login ___________________________________________________________

client = <FlaskClient <Flask 'candidate_app'>>, email = '0gG@h.BAB', pwd = '0000000A'

    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)
>   @given(email=EMAILS, pwd=PASSWORDS_VALID)

tests/test_auth_api.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<FlaskClient <Flask 'candidate_app'>>, '0gG@h.BAB', '0000000A'), kwargs = {}, arg_drawtime = 0.0005373749881982803, arg_stateful = 0.0
arg_gctime = 0.24075449886731803, start = 170154.376641583, result = None, finish = 170154.698884833, in_drawtime = 0.0, in_stateful = 0.0, in_gctime = 0.0
runtime = 0.3222432500042487

    @proxies(self.test)
    def test(*args, **kwargs):
        arg_drawtime = math.fsum(data.draw_times.values())
        arg_stateful = math.fsum(data._stateful_run_times.values())
        arg_gctime = gc_cumulative_time()
        start = time.perf_counter()
        try:
            with ensure_free_stackframes():
                result = self.test(*args, **kwargs)
        finally:
            finish = time.perf_counter()
            in_drawtime = math.fsum(data.draw_times.values()) - arg_drawtime
            in_stateful = (
                math.fsum(data._stateful_run_times.values()) - arg_stateful
            )
            in_gctime = gc_cumulative_time() - arg_gctime
            runtime = finish - start - in_drawtime - in_stateful - in_gctime
            self._timing_features = {
                "execute:test": runtime,
                "overall:gc": in_gctime,
                **data.draw_times,
                **data._stateful_run_times,
            }
    
        if (current_deadline := self.settings.deadline) is not None:
            if not is_final:
                current_deadline = (current_deadline // 4) * 5
            if runtime >= current_deadline.total_seconds():
>               raise DeadlineExceeded(
                    datetime.timedelta(seconds=runtime), self.settings.deadline
                )
E               hypothesis.errors.DeadlineExceeded: Test took 322.24ms, which exceeds the deadline of 200.00ms

venv/lib/python3.13/site-packages/hypothesis/core.py:877: DeadlineExceeded

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'candidate_app'>>

    @settings(suppress_health_check=[HealthCheck.function_scoped_fixture], max_examples=30)
>   @given(email=EMAILS, pwd=PASSWORDS_VALID)

tests/test_auth_api.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <hypothesis.internal.conjecture.datatree.TreeRecordingObserver object at 0x1115a5e80>, status = Status.INTERESTING
interesting_origin = InterestingOrigin(exc_type=<class 'hypothesis.errors.DeadlineExceeded'>, filename='/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/core.py', lineno=877, context=(), group_elems=())

    def conclude_test(self, status, interesting_origin):
        """Says that ``status`` occurred at node ``node``. This updates the
        node if necessary and checks for consistency."""
        if status == Status.OVERRUN:
            return
        i = self.__index_in_current_node
        node = self.__current_node
    
        if i < len(node.values) or isinstance(node.transition, Branch):
            inconsistent_generation()
    
        new_transition = Conclusion(status, interesting_origin)
    
        if node.transition is not None and node.transition != new_transition:
            # As an, I'm afraid, horrible bodge, we deliberately ignore flakiness
            # where tests go from interesting to valid, because it's much easier
            # to produce good error messages for these further up the stack.
            if isinstance(node.transition, Conclusion) and (
                node.transition.status != Status.INTERESTING
                or new_transition.status != Status.VALID
            ):
                old_origin = node.transition.interesting_origin
                new_origin = new_transition.interesting_origin
>               raise FlakyReplay(
                    f"Inconsistent results from replaying a test case!\n"
                    f"  last: {node.transition.status.name} from {old_origin}\n"
                    f"  this: {new_transition.status.name} from {new_origin}",
                    (old_origin, new_origin),
                )
E               hypothesis.errors.FlakyReplay: Inconsistent results from replaying a test case!
E                 last: INTERESTING from Failed at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/_pytest/outcomes.py:178
E                 this: INTERESTING from DeadlineExceeded at /Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/venv/lib/python3.13/site-packages/hypothesis/core.py:877

venv/lib/python3.13/site-packages/hypothesis/internal/conjecture/datatree.py:1124: FlakyReplay
______________________________________________________________________ test_email_policy_enforced _______________________________________________________________________

client = <FlaskClient <Flask 'candidate_app'>>

    def test_email_policy_enforced(client):
        for bad in ["x", "user@", "@domain.com", "a@b", "a@b.", "a@b.c", "a@b..com", "a b@c.com"]:
>           assert signup(client, bad, "Strong123").status_code == 400
E           AssertionError: assert 201 == 400
E            +  where 201 = <WrapperTestResponse streamed [201 CREATED]>.status_code
E            +    where <WrapperTestResponse streamed [201 CREATED]> = signup(<FlaskClient <Flask 'candidate_app'>>, 'a@b..com', 'Strong123')

tests/test_auth_api.py:81: AssertionError
======================================================================== short test summary info ========================================================================
FAILED tests/test_auth_api.py::test_property_valid_inputs_pass_signup_then_login - hypothesis.errors.FlakyReplay: Inconsistent results from replaying a test case!
FAILED tests/test_auth_api.py::test_email_policy_enforced - AssertionError: assert 201 == 400
2 failed, 9 passed in 151.38s (0:02:31)
pytest return code: 1
/Users/finnvonheesen/Desktop/quote-builder-llm-benchmark/run_benchmark.py:43: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  datetime.utcnow().isoformat(timespec='seconds') + 'Z',
Saved result for app_gpt5: rc=1, passed=9, failed=2, total=11